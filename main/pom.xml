<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>midorum.melbone</groupId>
        <artifactId>melbone</artifactId>
        <version>0.1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>main</artifactId>
    <version>${revision}</version>

    <dependencies>
        <dependency>
            <groupId>midorum.melbone</groupId>
            <artifactId>model</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>midorum.melbone</groupId>
            <artifactId>settings</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>midorum.melbone</groupId>
            <artifactId>executor</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>midorum.melbone</groupId>
            <artifactId>ui</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>midorum.melbone</groupId>
            <artifactId>window</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <plugin>
                <!-- Build an executable JAR -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>midorum.melbone.main.Application</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                            <Build-Time>${maven.build.timestamp}</Build-Time>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <!-- Build an executable fat JAR -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.version}</version>
                <executions>
                    <!-- Run shade goal on package phase -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <!-- add Main-Class to manifest file -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>midorum.melbone.main.Application</Main-Class>
                                        <Build-Time>${maven.build.timestamp}</Build-Time>
                                    </manifestEntries>
                                </transformer>
                                <!-- exclude module-info from fat jar -->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>module-info.*</resource>
                                </transformer>
                                <!-- Transformer for maven-shaded-plugin, that concatenates Log4j2Plugins.dat files in order to provide a workaround for LOG4J2-673 and LOG4J2-954 bugs. -->
                                <!-- https://github.com/edwgiz/maven-shaded-log4j-transformer/tree/cadff48627d814f052161d73b753cd29aa8af047 -->
                                <!-- https://issues.apache.org/jira/browse/LOG4J2-673 -->
                                <!-- https://issues.apache.org/jira/browse/LOG4J2-954 -->
                                <transformer
                                        implementation="io.github.edwgiz.log4j.maven.plugins.shade.transformer.Log4j2PluginCacheFileTransformer">
                                </transformer>
                            </transformers>
                            <!--suppress UnresolvedMavenProperty -->
                            <finalName>
                                ${app.artefact.name}-${project.version}
                            </finalName>
                            <createDependencyReducedPom>
                                false
                            </createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>io.github.edwgiz</groupId>
                        <artifactId>log4j-maven-shade-plugin-extensions</artifactId>
                        <version>${log4j.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.version}</version>
            </plugin>

            <!--
            https://technotes.khitrenovich.com/properties-resolution-maven-implications-antrun-plugin/
            All properties that are explicitly used in pom.xml are resolved before Maven lifecycle actually starts, even before the initialize phase.
            It happens when so-called “effective pom” (full project definition, including all implicit data and configuration settings propagated from parent project) is generated.
            BTW, you can see this in action by call mvn help:effective-pom on your project.

            Modifications of project properties that happen during project lifecycle have no effect on the effective pom – it is just too late.
            Examples of such modifications include groovy scripts (via gmaven-plugin) and properties loaded from external files via maven-properties-plugin.
            So, why do we need them at all?
            Since they can be used by other plugins in runtime, when they are read directly from properties collection during plugin invocation.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>${mojo.maven.properties.version}</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <id>read-project-properties</id>
                        <inherited>false</inherited>
                        <configuration>
                            <!--suppress MavenModelInspection -->
                            <files>
                                <file>${project.parent.basedir}/${app.build.properties.filename}</file>
                            </files>
                            <quiet>false</quiet>
                        </configuration>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <id>write-project-properties</id>
                        <configuration>
                            <outputFile>
                                ${project.build.directory}/build.properties
                            </outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.version}</version>
                <executions>
                    <!-- to avoid bugs in some situations -->
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>

                    <!-- create report during maven verify phase -->
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>